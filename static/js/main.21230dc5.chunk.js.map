{"version":3,"sources":["input-components/instructions.js","input-components/csvpreview.js","processing/processor.js","input-components/uploader.js","input-components/sdfilter.js","input-components/filtercutoff.js","input-components/lookdistance.js","input-components/tableheaders.js","input-components/analysiscolumn.js","input-components/negativeonly.js","output-components/visualizer.js","output-components/results.js","output-components/filestats.js","output-components/zoombuttons.js","input-components/errormsg.js","input-components/about.js","input-components/interpolatemode.js","input-components/dropoutcolumns.js","App.js","serviceWorker.js","index.js"],"names":["InstructionsGuide","props","toggleClass","bind","state","active","currentState","this","setState","style","textAlign","className","aria-haspopup","onClick","id","role","float","React","Component","CsvPreview","csvData","length","slice","map","row","index","key","col","cindex","Processor","SDmode","interpolateMode","filterCutoff","filterLower","filterHigher","lookDistance","ignoredRows","analysisColumn","dropoutColumns","cleanData","dropoutRows","push","_isOutlier","includes","_modifyDropoutRow","cleanedCsvData","dropoutRowNums","modifiedRow","_interpolatePoint","currentVal","neighbouringVals","firstComparisonPoint","lastComparisonPoint","isOutlier","pos","currentDifference","mean","std","targetRow","targetColumn","columns","graphData","colorsList","defaultColorsList","endPoint","dataPoints","xPoint","isNaN","parseInt","x","y","parseFloat","currentLine","_getColName","data","getCleanedDataPoints","tenthPoint","Math","round","axisBottomTickValues","colors","originalLength","encounteredLastVal","isLastVal","val","rowVals","pop","forEach","column","title","Uploader","beginCallback","innerCSVData","newdata","newCsvData","removeTrailingEmpties","callback","cssClass","onFileLoaded","SDFilter","event","target","value","type","marginRight","checked","onChange","marginLeft","FilterCutoff","mode","min","step","default","placeholder","LookDistance","TableHeaders","AnalysisColumn","max","maxColumns","NegativeOnly","lowerDefault","higherDefault","beginHigherCallback","beginLowerCallback","bool","Visualizer","toGraphData","height","overflow","width","graphWidth","enableGridX","margin","left","bottom","right","top","axisLeft","orient","legend","legendPosition","legendOffset","axisBottom","tickValues","legends","anchor","direction","translateX","translateY","itemWidth","itemHeight","Results","isProcessing","InterpolateMode","FileStats","droppedRowCount","ZoomButtons","disabled","path","mdiMagnifyMinusOutline","size","mdiMagnifyPlusOutline","ErrorMsg","errorMsg","mdiAlert","color","About","href","DropoutColumns","myVals","inputVals","myVal","inputVal","join","isSuccess","processInput","newValueArray","replace","split","zeroIndexArray","valid","i","indexVal","App","toggleProcessingData","checkForErrors","changeGraphSize","loadNegativeOnly","loadNewData","loadSDmode","loadInterpolateMode","loadFilterCutoff","loadLookDistance","loadIgnoredRows","loadAnalysisColumn","loadDropoutColumns","prevProps","prevState","snapshot","errCheck","results","errors","undefined","colOfInterest","e","newWidth","higherOrLower","arrayOfDropouts","isEnabled","paddingLeft","marginTop","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.21230dc5.chunk.js","sourcesContent":["import React from 'react';\n\n\nclass InstructionsGuide extends React.Component {\n    constructor(props) {\n        super(props);\n        this.toggleClass = this.toggleClass.bind(this);\n        this.state = {\n            active: false,\n        };\n    }\n\n    toggleClass() {\n        const currentState = this.state.active;\n        this.setState({ active: !currentState });\n    }\n\n    render() {\n        return (\n            <div>\n                <div style={{ textAlign: 'left' }} className={this.state.active ? \"dropdown is-active\" : \"dropdown\"}>\n                    <div className=\"dropdown-trigger\">\n                        <button className=\"button is-text\" aria-haspopup=\"true\" onClick={this.toggleClass}>\n                            <span>Instructions</span>\n                        </button>\n                    </div>\n                    <div className=\"dropdown-menu\" id=\"dropdown-instructions\" role=\"menu\">\n                        <div className=\"dropdown-content\">\n                            <div className=\"dropdown-item\">\n                                <p>\n                                    <button className=\"delete\" onClick={this.toggleClass} style={{ float: 'right' }}>Hide</button>\n                                    Upload a \".csv\" file with any number of columns. Specify which column to analyze.\n                                    Data in that column that is an outlier relative to its peers will be\n                                    marked as an outlier. All outlier rows will have the values under \"columns to modify\" either \n                                    deleted or interpolated based on your settings. <br/>\n                                    <b>Note:</b> The preview graph currently only supports showing the modified values\n                                    of your column of analysis: if you choose not to modify the column of analysis, you won't see any\n                                    of your changes in the preview.\n                                </p>\n                            </div>\n                            <hr className=\"dropdown-divider\" />\n                            <div className=\"dropdown-item\">\n                                <b>Standard Deviation Mode </b><label className=\"tag\">default</label>\n                                <p>Compares the current data point to the specified amount of values ahead/behind (exclusive of this\n                                current point). If the difference is more than the specified cutoff value from the standard\n                                    deviation (of the mean), the point is flagged as dropout.</p>\n                            </div>\n                            <div className=\"dropdown-item\">\n                                <b>Absolute Mode </b>\n                                <p>Compares the current data point to the mean of the of values ahead/behind, if it is a static difference\n                                    away from the mean, it will be modified.\"</p>\n                            </div>\n                            <div className=\"dropdown-item\">\n                                <p>\n                                    <b>Interpolation</b> looks at the surrounding lookDistance-away values of the analysis column, and \n                                    calculates the mean of these values, ignoring any that would be considered a dropout themselves. \n                                    A new, \"unbiased\" mean is calculated which is taken as the interpolated value. For modifying\n                                    columns that are not the analysis column, it calculates the mean of values from that column, but\n                                    references the analysis column for guidance on which rows are dropouts and should be ignored from\n                                    calculations of the mean.\n                                </p>\n                            </div>\n                            <hr className=\"dropdown-divider\" />\n                            <div className=\"dropdown-item\">\n                                <p>\n                                    The program also lets you choose if dropouts can be lower (negative) compared to the average\n                                    of the compared period, or higher, or both. This is useful if your sensor reports\n                                    erroneous values in one consistent direction.\n                                </p>\n                                <p>\n                                    <i>First/Last values</i>: If the program is unable to \"look\" the specified amount of cells\n                                    behind or ahead of the current value, it will attempt to do so with the values that do exist\n                                    within the current look range. (It will not attempt to look further \"ahead\" if there are not\n                                    enough values \"behind\", however)\n                                </p>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default InstructionsGuide;","import React from 'react';\n\nclass CsvPreview extends React.Component {\n    constructor(props) {\n        super(props);\n        this.toggleClass = this.toggleClass.bind(this);\n        // keep track of current state\n        this.state = {\n            active: false,\n        };\n    }\n\n    toggleClass() {\n        const currentState = this.state.active;\n        this.setState({ active: !currentState });\n    }\n\n    // Pass \"csvData\" to this component\n    render() {\n        // @TODO: add logic here to hide when file not chosen\n        if (this.props.csvData.length === 0 || !this.props.csvData) {\n            return (<div></div>)\n        }\n        return (\n            <div>\n                <div className={this.state.active ? \"dropdown is-active is-pulled-right\" : \"dropdown is-pulled-right\"}>\n                    <div className=\"dropdown-trigger\">\n                        <button className=\"button is-small is-text\" aria-haspopup=\"true\" onClick={this.toggleClass}>\n                            <span>Snippet</span>\n                        </button>\n                    </div>\n                    <div className=\"dropdown-menu\" id=\"dropdown-instructions\" role=\"menu\">\n                        <div className=\"dropdown-content\">\n                            <div className=\"dropdown-item\">\n                            <button className=\"delete\" onClick={this.toggleClass} style={{ float: 'right' }}>Hide</button>\n                                <table className=\"table is-striped is-narrow is-bordered\">\n                                    <tbody>\n                                        {this.props.csvData.slice(0, 6).map((row, index) => (\n                                            <tr key={row + index}>\n                                                {row.map((col, cindex) => (\n                                                    <td key={cindex}>{col}</td>\n                                                ))}\n                                            </tr>\n                                        ))}\n                                    </tbody>\n                                </table>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n        )\n    }\n\n}\n\n\n\nexport default CsvPreview;","import { std, mean } from 'mathjs'\n/**\n *  Data Processor Code\n *  - Created by Adam Mesa (Krassioukov Lab, Faculty of Medicine, \n *      The University of British Columbia, BC, Canada)\n *  - this simple algorithm takes in the user's settings/csvData and returns an \n *      array of row numbers to be dropped from the given csv data, as well as a\n *      new array which has said numbers dropped.\n **/\nclass Processor {\n    // Cleans the given csvData according to the passed variables and returns a map of: \n    // (1) cleanedCsvData, (2) array of dropped rows\n    static cleanData(\n        csvData,\n        SDmode,\n        interpolateMode,\n        filterCutoff,\n        filterLower,\n        filterHigher,\n        lookDistance,\n        ignoredRows,\n        analysisColumn,\n        dropoutColumns) {\n        let cleanData = [];\n        let dropoutRows = [];\n        // Push header columns onto CSV\n        for (let row = 0; row < ignoredRows; row++) { cleanData.push(csvData[row]); }\n        // Begin filtering the data\n        for (let row = ignoredRows; row < csvData.length; row++) {\n            if (this._isOutlier(row, csvData, SDmode, filterCutoff, filterLower,\n                filterHigher, lookDistance, ignoredRows, analysisColumn)) {\n                dropoutRows.push(row);\n            } \n        }\n\n        for (let row = ignoredRows; row < csvData.length; row++) {\n            if (dropoutRows.includes(row)) {\n                cleanData.push(this._modifyDropoutRow(row, csvData, interpolateMode, \n                    lookDistance, ignoredRows, dropoutColumns, dropoutRows));\n            } else {\n                cleanData.push(csvData[row]);\n            }\n        }\n        return { cleanedCsvData: cleanData, dropoutRowNums: dropoutRows };\n    }\n\n    /***\n     * Modifies the values of a row flagged as a dropout according to interpolateMode.\n     * - @param row a dropout row to modify \n     * - @param dropoutRowNums all dropout rows (to ensure neighbouring dropout values aren't included in interpolation\n     *                         calculations)\n     * - returns the complete, adjusted row (with both adjusted values and values not flagged for adjustment)\n     */\n    static _modifyDropoutRow(row, csvData, interpolateMode, lookDistance, ignoredRows, dropoutColumns, dropoutRowNums) {\n        let modifiedRow = [];\n        for (let col = 0; col < csvData[row].length; col++) {\n            if (dropoutColumns.includes(col)) {\n                if (interpolateMode) {\n                    modifiedRow.push(this._interpolatePoint(row, csvData, lookDistance, ignoredRows, col, dropoutRowNums));\n                } else {\n                    modifiedRow.push(null);\n                }\n            } else {\n                modifiedRow.push(csvData[row][col]);\n            }\n        }\n        return modifiedRow; \n    }\n\n    /*****\n     * Checks if a value is an outlier compared to the neighbouring values \n     * @returns bool - true if the value is an outlier, otherwise false\n     * */\n    static _isOutlier(\n        row,\n        csvData,\n        SDmode,\n        filterCutoff,\n        filterLower,\n        filterHigher,\n        lookDistance,\n        ignoredRows,\n        analysisColumn) {\n        let neighbouringVals = [];\n        let firstComparisonPoint = row - lookDistance;\n        let lastComparisonPoint = row + lookDistance;\n        let isOutlier = false;\n        let currentVal;\n\n        if (firstComparisonPoint < ignoredRows) {\n            // Values \"behind\" of the current point aren't enough for lookDistance, so process current point as best possible\n            firstComparisonPoint = ignoredRows;\n        } else if (lastComparisonPoint > (csvData.length - 1)) {\n            // Values \"ahead\" of the current point aren't enough for lookDistance, so process current point as best possible\n            lastComparisonPoint = (csvData.length - 1);\n        }\n        for (let pos = firstComparisonPoint; pos < lastComparisonPoint; pos++) {\n            if (pos === row) {\n                currentVal = csvData[pos][analysisColumn];\n            } else {\n                neighbouringVals.push(csvData[pos][analysisColumn]);\n            }\n        }\n        /**\n         * Dropout logic\n         */\n        let average = mean(neighbouringVals);\n        let currentDifference = currentVal - average;\n        // Is current value lower than its peers and are we filtering lower?\n        if (currentDifference < 0 && filterLower) {\n            if (SDmode) {\n                let stdeviation = std(neighbouringVals);\n                isOutlier = currentDifference < (-stdeviation * filterCutoff);\n            } else {\n                isOutlier = currentDifference < (-filterCutoff);\n            }\n        } else\n            // Is current value higher than its peers and are we filtering higher?\n            if (currentDifference > 0 && filterHigher) {\n                if (SDmode) {\n                    let stdeviation = std(neighbouringVals);\n                    isOutlier = currentDifference > (stdeviation * filterCutoff);\n                } else {\n                    isOutlier = currentDifference > (filterCutoff);\n                }\n            }\n        return isOutlier;\n    }\n\n    /**\n     * Creates an interpolated value based on lookDistance, ignoring any surrounding values\n     *   that are also below or above the cutoffs. \n     * @param targetRow the row to interpolate\n     * @param csvData the file's CSV data\n     * @param lookDistance used for fetching values to interpolate between\n     * @param ignoredRows the starting point accounted for by 'header rows'\n     * @param targetColumn The column to average across\n     * @param dropoutRowNums the list of all dropouts; to be ignored in interpolation if encountered\n     * @return the interpolated value of the surrounding values\n     */\n    static _interpolatePoint(targetRow, csvData, lookDistance, ignoredRows, targetColumn, dropoutRowNums) {\n        let neighbouringVals = [];\n        let firstComparisonPoint = targetRow - lookDistance;\n        let lastComparisonPoint = targetRow + lookDistance;\n        if (firstComparisonPoint < ignoredRows) { firstComparisonPoint = ignoredRows; }\n        if (lastComparisonPoint > (csvData.length - 1)) { lastComparisonPoint = csvData.length - 1; }\n        for (let pos = firstComparisonPoint; pos < lastComparisonPoint; pos++) {\n            if (dropoutRowNums.includes(pos)) {\n                // The current row is a row flagged for modification, don't include it in averaging\n            } else {\n                neighbouringVals.push(csvData[pos][targetColumn]);\n            }\n        }\n        const average = mean(neighbouringVals);\n        return average;\n    }\n\n    // Prepares are Nivo-ready dataset from (original) csvData, delrows, and\n    //    new cleanedCsvData, with ignoredRows becoming the title of each dataset\n    //    Returns a map of:\n    //    { data: LineData, axisBottomTickValues: tickValues, colours: colour scheme }\n    static toGraphData(\n        csvData,\n        cleanedCsvData,\n        ignoredRows,\n        interpolateMode,\n        analysisColumn,\n        dropoutRowNums) {\n        let columns = csvData[0].length;\n        let graphData = [];\n        let colorsList = [];\n        let defaultColorsList = [\"#b3e2cd\", \"#fdcdac\", \"#f4cae4\", \"#fff2ae\", \"#f1e2cc\"]\n        let endPoint = 0;\n        for (let col = 0; col < columns; col++) {\n            let dataPoints = [];\n            let xPoint = 1;\n            for (let row = ignoredRows; row < csvData.length; row++) {\n                // Must first check that row val is a number, otherwise don't push\n                if (!isNaN(parseInt(csvData[row][col]))) {\n                    dataPoints.push({\n                        x: xPoint,\n                        y: parseFloat(csvData[row][col])\n                    });\n                    if (xPoint > endPoint) {\n                        // Used in axis tick calculations\n                        endPoint = xPoint;\n                    }\n                }\n                xPoint++;\n            }\n            let currentLine;\n            if (analysisColumn === col) {\n                /// Sets a light blue colour so the pruned dataset can be darker and stand out\n                currentLine = {\n                    id: this._getColName(csvData, col, ignoredRows),\n                    data: dataPoints\n                }\n                colorsList.push(\"hsl(204, 100%, 85%\");\n            } else {\n                currentLine = {\n                    id: this._getColName(csvData, col, ignoredRows),\n                    data: dataPoints\n                };\n                // use a pastel colour\n                colorsList.push(defaultColorsList[col % defaultColorsList.length]);\n            }\n            graphData.push(currentLine);\n        }\n        if (cleanedCsvData.length > 0) {\n            let dataPoints = Processor.getCleanedDataPoints(ignoredRows,\n                cleanedCsvData, interpolateMode, dropoutRowNums, analysisColumn);\n\n            graphData.push({\n                id: this._getColName(cleanedCsvData, analysisColumn, ignoredRows) + ' dropped',\n                data: dataPoints\n            });\n            colorsList.push(\"hsl(204, 100%, 50%)\");\n        }\n        let tenthPoint = Math.round(endPoint / 10);\n        let tickVals = [1, tenthPoint,\n            tenthPoint * 2,\n            tenthPoint * 3,\n            tenthPoint * 4,\n            tenthPoint * 5,\n            tenthPoint * 6,\n            tenthPoint * 7,\n            tenthPoint * 8,\n            tenthPoint * 9,\n            endPoint\n        ];\n\n        return { data: graphData, axisBottomTickValues: tickVals, colors: colorsList };\n    }\n\n    /***\n     *  Helper function to get plottable datapoints of the desired line from the\n     *  clean data set.\n     **/\n    static getCleanedDataPoints(ignoredRows, cleanedCsvData, interpolateMode,\n        dropoutRowNums, analysisColumn) {\n        let dataPoints = [];\n        let xPoint = 1;\n        for (let row = ignoredRows; row < cleanedCsvData.length; row++) {\n            if (!interpolateMode && dropoutRowNums.includes(row)) {\n                dataPoints.push({ x: xPoint, y: null });\n            }\n            else {\n                if (!isNaN(parseInt(cleanedCsvData[row][analysisColumn]))) {\n                    dataPoints.push({ x: xPoint, y: cleanedCsvData[row][analysisColumn] });\n                }\n            }\n            xPoint++;\n        }\n        return dataPoints;\n    }\n\n    // Returns an csv matrix with all empty trailing rows removed\n    static removeTrailingEmpties(csvData) {\n        let originalLength = csvData.length\n        let encounteredLastVal = false;\n        // Declaring this func outside of for loop avoids 'no-loop-func' error\n        function isLastVal(val) {\n            if (!isNaN(parseInt(val))) {\n                encounteredLastVal = true;\n            }\n        }\n\n        for (let row = 0; row < originalLength; row++) {\n            if (!encounteredLastVal) {\n                let rowVals = csvData.pop();\n                rowVals.forEach((val) => isLastVal(val));\n                if (encounteredLastVal) {\n                    csvData.push(rowVals);\n                    row = row + csvData.length; // shortcut to end pointless looping\n                }\n            }\n        }\n        return csvData;\n    }\n\n\n\n    // Combines the contents of the ignored rows to form a column title\n    static _getColName(csvData, column, ignoredRows) {\n        let title = '';\n        for (let row = 0; row < ignoredRows; row++) {\n            title = title + csvData[row][column] + ' ';\n        }\n        return title;\n    }\n\n    /** Chart Data\n     * Array<{\n     *   id:   string | number\n     *   color: hsl(int, %, %)     (optional)\n     *   data: Array<{\n     *     x: number | string | Date\n     *     y: number | string | Date\n     *   }>\n     * }>\n     */\n}\n\nexport default Processor;","import React from 'react';\nimport CSVReader from 'react-csv-reader';\nimport CsvPreview from './csvpreview';\nimport Processor from '../processing/processor';\n\nclass Uploader extends React.Component {\n    constructor(props) {\n        super(props);\n        this.beginCallback = this.beginCallback.bind(this);\n        this.state = {\n            innerCSVData: []\n        }\n    }\n\n    beginCallback(newdata) {\n        /// Removes trailing rows from the uploaded file as well (CSVs commonly have hundreds of empty rows)\n        let newCsvData = Processor.removeTrailingEmpties(newdata);\n        this.setState({ innerCSVData: newCsvData });\n        this.props.callback(newCsvData);\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"pad-item-bottom\">\n                    <div className=\"columns\">\n                        <div className=\"column\">\n                            {/* <CSVReader onFileLoaded={data => console.log(data)} /> */}\n                            <CSVReader\n                                cssClass=\"control\"\n                                onFileLoaded={data => this.beginCallback(data)}\n                            />\n                        </div>\n                        <div className=\"column\">\n                            <CsvPreview csvData={this.state.innerCSVData} />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Uploader;","import React from 'react';\n\n// Expects a prop called \"callback\" which takes true (Standard deviation mode) or false (absolute units)\nclass SDFilter extends React.Component {\n    constructor(props) {\n        super(props);\n        this.beginCallback = this.beginCallback.bind(this);\n        this.state = {\n            SDmode: true\n        }\n    }\n\n    beginCallback(event) {\n        if (event.target.value === \"SDmode\") {\n            this.setState({ SDmode: true });\n            this.props.callback(true);\n        } else {\n            this.setState({ SDmode: false });\n            this.props.callback(false);\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"field pad-item-bottom\">\n                    <label>Filtering mode:</label>\n                    <div className=\"control\">\n                        <label className=\"radio\">\n                            <input\n                                type=\"radio\"\n                                value=\"SDmode\"\n                                style={{ marginRight: '5px' }}\n                                checked={this.state.SDmode}\n                                onChange={this.beginCallback}\n                            />\n                            Standard Deviation\n                    </label>\n                        <label className=\"radio\">\n                            <input\n                                type=\"radio\"\n                                value=\"absolute\"\n                                style={{ marginRight: '5px', marginLeft: '25px' }}\n                                checked={!this.state.SDmode}\n                                onChange={this.beginCallback}\n                            />\n                            &nbsp;Absolute \n                    </label>\n                    </div>\n                </div>\n\n            </div>\n        )\n    }\n}\n\nexport default SDFilter;","import React from 'react';\n\n// props:\n// - \"callback\" which takes a number (of the cutoff value range)\n// - \"default\" (optional) which takes the starting number\n\nclass FilterCutoff extends React.Component {\n    render() {\n        return (\n            <div className=\"field\">\n                <label>Cutoff {this.props.mode ? 'deviation' : 'difference' }:</label>\n                <div className=\"control\">\n                    <input \n                    className=\"input\" \n                    type=\"number\" \n                    onChange={this.props.callback} \n                    min=\"0\"\n                    step={this.props.mode ? '0.1' : '2'}\n                    value={isNaN(this.props.default) ? '' : this.props.default}\n                    placeholder=\"(A S.D. cutoff of 1.5 is recommended)\" />\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default FilterCutoff;","import React from 'react';\n\n// Expects props:\n// - \"callback\" which takes an integer\n// - \"default\" (optional) which takes the starting number\n// Specifies how many values ahead (and behind) to calculate if the current value is an outlier\n\nclass LookDistance extends React.Component {\n    render() {\n        return (\n            <div className=\"field\">\n                <label>Compare {isNaN(this.props.default) ? '_' : this.props.default} ahead &amp; behind</label>\n                <div className=\"control\">\n                    <input \n                    className=\"input\" \n                    type=\"number\" \n                    onChange={this.props.callback} \n                    min=\"1\"\n                    step=\"1\"\n                    value={isNaN(this.props.default) ? '' : this.props.default}\n                    placeholder=\"(Integers only)\" />\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default LookDistance;","import React from 'react';\n\n// Expects props:\n// - \"callback\" which takes an integer\n// - \"default\" (optional) which takes the starting number\n// Specifies how many rows from the top are tables / should be ignored\n\nclass TableHeaders extends React.Component {\n    render() {\n        return (\n            <div className=\"field\">\n                <label className=\"tag is-white\">Header rows</label>\n                <div className=\"control\">\n                    <input \n                    className=\"input is-small\" \n                    type=\"number\" \n                    onChange={this.props.callback} \n                    min=\"0\"\n                    step=\"1\"\n                    value={this.props.default}\n                    placeholder=\"(Integers only)\" />\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default TableHeaders;","import React from 'react';\n\n// Expects props:\n// - \"callback\" which takes an integer\n// - \"default\" (optional) which takes the starting number\n// Specifies which column to analyze \n\nclass AnalysisColumn extends React.Component {\n    render() {\n        return (\n            <div className=\"field\">\n                <label className=\"tag is-white\">Column to analyze</label>\n                <div className=\"control\">\n                    <input \n                    className=\"input is-small\" \n                    type=\"number\" \n                    onChange={this.props.callback} \n                    min=\"1\"\n                    max={this.props.maxColumns}\n                    step=\"1\"\n                    value={this.props.default + 1}\n                    placeholder=\"(Integers only)\" />\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default AnalysisColumn;","import React from 'react';\n\n// Expects props:\n// - \"callback\" which takes a toggle function(value, lower/higher)\n// - \"lowerDefault\"\n// - \"higherDefault\"\n// Specifies whether or not to only drop numbers that are standard deviation/absolute amt lower/higher than the surrounding\n//   values \n\nclass NegativeOnly extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            filterLower: this.props.lowerDefault,\n            filterHigher: this.props.higherDefault\n        }\n        this.beginHigherCallback = this.beginHigherCallback.bind(this);\n        this.beginLowerCallback = this.beginLowerCallback.bind(this);\n    }\n\n    beginHigherCallback(event) {\n        const bool = !this.state.filterHigher;\n        this.setState({ filterHigher: bool });\n        this.props.callback(bool, 'higher');\n    }\n\n    beginLowerCallback(event) {\n        const bool = !this.state.filterLower;\n        this.setState({ filterLower: bool });\n        this.props.callback(bool, 'lower');\n    }\n\n    render() {\n        return (\n            <div className=\"field\">\n                <label>Dropouts are:</label>\n                <label style={{marginLeft: '10px'}}className=\"checkbox\">\n                    <input checked={this.state.filterLower} onChange={this.beginLowerCallback} type=\"checkbox\" />&nbsp;\n                    Lower\n                </label>\n                <label style={{marginLeft: '10px'}} className=\"checkbox\">\n                    <input checked={this.state.filterHigher} onChange={this.beginHigherCallback} type=\"checkbox\" />&nbsp;\n                    Higher\n                </label>\n            </div>\n        )\n    }\n}\n\nexport default NegativeOnly;","import React from 'react';\nimport { ResponsiveLineCanvas } from '@nivo/line'\nimport Processor from '../processing/processor';\n/**\n *  See Nivo docs for more information: https://nivo.rocks/line/\n *  - will transform each column into a dataset/line\n *  Props expected:\n *  - graphWidth, csvData cleanedCsvData, ignoredRows, delRowNums\n **/\nclass Visualizer extends React.Component {\n    render() {\n        let graphData = Processor.toGraphData(\n            this.props.csvData,\n            this.props.cleanedCsvData,\n            this.props.ignoredRows,\n            this.props.interpolateMode,\n            this.props.analysisColumn,\n            this.props.dropoutRowNums);\n        return (\n            <div style={{ height: '100%', overflow: 'auto' }}>\n                <div style={{\n                    height: '95%',\n                    width: this.props.graphWidth,\n                }}>\n                    <ResponsiveLineCanvas\n                        data={graphData.data}\n                        enableGridX={false}\n                        margin={{ left: 60, bottom: 50, right: 50, top: 50 }}\n                        axisLeft={{\n                            orient: 'left',\n                            legend: 'Value',\n                            legendPosition: 'middle',\n                            legendOffset: -40\n                        }}\n                        colors={[...graphData.colors]}\n                        axisBottom={{\n                            orient: 'bottom',\n                            legend: 'Reading #',\n                            legendPosition: 'start',\n                            legendOffset: 40,\n                            tickValues: [...graphData.axisBottomTickValues]\n                        }}\n                        legends={[{\n                            anchor: 'bottom-left',\n                            direction: 'row',\n                            translateX: 100,\n                            translateY: 50,\n                            itemWidth: (80 * this.props.ignoredRows),\n                            itemHeight: 20\n                        }]}\n                    />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Visualizer;","import React from 'react';\nimport Visualizer from './visualizer';\n\n// Props expected:\n// - all state vars in app.js (csvData, SDmode, filterCutoff...)\n// - callback function for when data is finished processing\nclass Results extends React.Component {\n    render() {\n        if (this.props.csvData.length > 0 && this.props.isProcessing) {\n            return (\n                <div style={{ height: '100%' }}>\n                    <Visualizer\n                        csvData={this.props.csvData}\n                        cleanedCsvData={this.props.cleanedCsvData}\n                        ignoredRows={this.props.ignoredRows}\n                        analysisColumn={this.props.analysisColumn}\n                        interpolateMode={this.props.InterpolateMode}\n                        dropoutRowNums={this.props.dropoutRowNums}\n                        graphWidth={this.props.graphWidth}\n                    />\n                </div>\n            );\n        } else {\n            return (<div></div>);\n        }\n\n    }\n}\n\nexport default Results;","import React from 'react';\nimport { CSVLink } from 'react-csv';\n\nclass FileStats extends React.Component {\n    render() {\n        if (this.props.isProcessing) {\n            let droppedRowCount = this.props.dropoutRowNums.length;\n            return (\n                <div className=\"box dropout-stats has-background-link has-text-white\">\n                    <div className=\"columns\">\n                        <div className=\"column\">\n                            <p className=\"is-size-4\">\n                                {this.props.csvData.length}\n                            </p>\n                            <p className=\"is-size-7\">\n                                Total Rows\n                            </p>\n                        </div>\n                        <div className=\"column\">\n                        <p className=\"is-size-4\">\n                                {droppedRowCount}\n                            </p>\n                            <p className=\"is-size-7\">\n                                {this.props.InterpolateMode ? 'Values Interpolated' : 'Rows Dropped'}\n                            </p>\n                        </div>\n                        <div className=\"column\">\n                            <button className=\"button is-light is-pulled-right\">\n                                <CSVLink data={this.props.cleanedCsvData}>Download</CSVLink>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            );\n        } else {\n            return (<div></div>);\n        }\n\n    }\n}\n\nexport default FileStats;","import React, { Component } from 'react';\nimport Icon from '@mdi/react';\nimport { mdiMagnifyPlusOutline, mdiMagnifyMinusOutline } from '@mdi/js';\n\n/** \n * Creates the zoom in / zoom out buttons for the graph. Props expected:\n *  - isProcessing (decides whether or not to include the buttons)\n *  - callback (updates graph width)\n *  - graphWidth (current graph width, used for disabling when too small)\n */\nclass ZoomButtons extends Component {\n    render() {\n        if (this.props.isProcessing) {\n            return (\n                <div className=\"is-pulled-right\">\n                    <button\n                        className=\"button is-white\"\n                        disabled={this.props.graphWidth < 701}\n                        onClick={() => this.props.callback('-')}\n                    >\n                        <Icon path={mdiMagnifyMinusOutline} size={1} />\n                    </button>\n                    &nbsp;\n                    <button\n                        className=\"button is-white\"\n                        onClick={() => this.props.callback('+')}\n                    >\n                        <Icon path={mdiMagnifyPlusOutline} size={1} />\n                    </button>\n                    &nbsp;\n                </div>\n            );\n        } else {\n            return (<div></div>);\n        }\n\n    }\n}\n\nexport default ZoomButtons;","import React, { Component } from 'react';\nimport Icon from '@mdi/react';\nimport { mdiAlert } from '@mdi/js';\n\nclass ErrorMsg extends Component {\n    render() {\n        if (this.props.errorMsg === '') {\n            return (<div></div>);\n        } else {\n            return (\n            <div className='tag is-warning is-light'>\n                <Icon path={mdiAlert} size={0.5} color={'#947600'} />&nbsp;{this.props.errorMsg}\n            </div>\n            );\n        }\n    }\n}\n\nexport default ErrorMsg;","import React from 'react';\n\n\nclass About extends React.Component {\n    constructor(props) {\n        super(props);\n        this.toggleClass = this.toggleClass.bind(this);\n        this.state = {\n            active: false,\n        };\n    }\n\n    toggleClass() {\n        const currentState = this.state.active;\n        this.setState({ active: !currentState });\n    }\n\n    render() {\n        return (\n            <div>\n                <div style={{textAlign: 'left'}} className={this.state.active ? \"dropdown is-active\" : \"dropdown\"}>\n                    <div className=\"dropdown-trigger\">\n                        <button className=\"button is-text\" aria-haspopup=\"true\" onClick={this.toggleClass}>\n                            <span>about & security</span>\n                        </button>\n                    </div>\n                    <div className=\"dropdown-menu\" id=\"dropdown-instructions\" role=\"menu\">\n                        <div className=\"dropdown-content\">\n                            <div className=\"dropdown-item\">\n                                <p>\n                                    <button className=\"delete\" onClick={this.toggleClass} style={{ float: 'right' }}>Hide</button>\n                                    <b>About</b><br/> \n                                    This tool was created by Adam Mesa in Krassioukov Lab (Autonomic Research Unit, ICORD, University of British\n                                    Columbia, BC, Canada). It was made to help with physiologic devices re-calibrating mid-reading that would\n                                    report values far below expected before returning to the expected/consensus readings of our other devices.<br/>\n                                </p>\n\n                            </div>\n                            <hr className=\"dropdown-divider\" />\n                            <div className=\"dropdown-item\">\n                                <p>\n                                    <b>Security</b><br />\n                                    This tool is offline-only: all processing happens on your computer (via JavaScript). Nothing is sent to any\n                                    external servers - all your sensitive data stays on your PC. It is also possible to \"install\" this application\n                                    via Google Chrome/FireFox, allowing you to have a start-menu icon if you prefer.\n                                </p>\n                            </div>\n                            <hr className=\"dropdown-divider\" />\n                            <div className=\"dropdown-item\"> \n                                <b>Versions </b>\n                                <label className=\"tag\">Current: v1.2</label>&nbsp;\n                                <a className=\"tag is-link\" href=\"https://github.com/adammesa/dropout-remover\" target=\"_blank\">\n                                    Source Code &#8594;\n                                </a>\n                                <div>\n                                    <ul>\n                                        <li>v1.2 - June 2020; Added interpolation/removal row chooser, error message improvements</li>\n                                        <li>v1.1 - June 2020; Added Interpolation, bugfixes, & better error catches</li>\n                                        <li>v1.0.1 - June 2020; Bugfixes, minor usability improvements</li>\n                                        <li>v1.0 - March 2020; Initial Release</li>\n                                    </ul>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default About;","import React from 'react';\n\n// Expects a prop called \"callback\" which \n//  takes true (interpolate values) or false (blank whole row)\nclass InterpolateMode extends React.Component {\n    constructor(props) {\n        super(props);\n        this.beginCallback = this.beginCallback.bind(this);\n        this.state = {\n            InterpolateMode: true\n        }\n    }\n\n    beginCallback(event) {\n        if (event.target.value === \"Interpolate\") {\n            this.setState({ InterpolateMode: true });\n            this.props.callback(true);\n        } else {\n            this.setState({ InterpolateMode: false });\n            this.props.callback(false);\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"field pad-item-bottom\">\n                    <label>Action to take with dropouts:</label>\n                    <div className=\"control\">\n                        <label className=\"radio\">\n                            <input\n                                type=\"radio\"\n                                value=\"Interpolate\"\n                                style={{ marginRight: '5px' }}\n                                checked={this.state.InterpolateMode}\n                                onChange={this.beginCallback}\n                            />\n                            Interpolate values\n                    </label>\n                        <label className=\"radio\">\n                            <input\n                                type=\"radio\"\n                                value=\"blank-row\"\n                                style={{ marginRight: '5px', marginLeft: '25px' }}\n                                checked={!this.state.InterpolateMode}\n                                onChange={this.beginCallback}\n                            />\n                            &nbsp;Erase values\n                    </label>\n                    </div>\n                </div>\n\n            </div>\n        )\n    }\n}\n\nexport default InterpolateMode;","import React from 'react';\n\n// Expects props:\n// - \"callback\" which takes an array of numbers\n// - \"default\" (optional) which takes the starting array\n// - min row number\n// - max row number\n// Specifies which column to analyze \n\nclass DropoutColumns extends React.Component {\n    constructor(props) {\n        super(props);\n        const myVals = props.default;\n        let inputVals = [];\n        myVals.forEach(myVal => {\n            inputVals.push(myVal + 1);\n        });\n        this.state = {\n            inputVal: inputVals.join(', '),\n            isSuccess: true\n        }\n\n        this.processInput = this.processInput.bind(this);\n    }\n\n    // String-processing helper function\n    processInput(event) {\n        const newValue = event.target.value;\n        let newValueArray = newValue.replace(/\\s/g, \"\").split(',');\n        let zeroIndexArray = [];\n        let valid = true;\n        for (let i = 0; i < newValueArray.length; i++) {\n            const val = parseInt(newValueArray[i]);\n            if (!isNaN(val)) {\n                const indexVal = val - 1;\n                if (indexVal >= 0 && indexVal < this.props.maxColumns) {\n                    \n                    zeroIndexArray.push(indexVal);\n                } else { \n                    valid = false; \n                }\n            } else if (val === \"\") {\n                // do nothing, but not invalid val\n            } else {\n                valid = false;\n            }\n        }\n        if (valid) {\n            this.props.callback(zeroIndexArray);\n            this.setState({ inputVal: event.target.value, \n                isSuccess: true });\n        } else {\n            this.props.callback([]); //put empty array so it generates error message\n            this.setState({\n                inputVal: event.target.value, \n                isSuccess: false });\n        }\n    }\n\n\n    render() {\n        return (\n            <div className=\"field\">\n                <label className=\"tag is-white\">Columns to modify (comma separated)</label>\n                <div className=\"control\">\n                    <input \n                    className={this.state.isSuccess \n                        ? \"input is-small\" : \"input is-small is-danger\"}\n                    type=\"string\" \n                    onChange={this.processInput} \n                    value={this.state.inputVal}\n                    placeholder=\"(Comma separated (e.g. '1, 3, 4, 5'))\" />\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default DropoutColumns;","import React from 'react';\nimport './App.css';\nimport { mean } from 'mathjs';\nimport InstructionsGuide from './input-components/instructions';\nimport Uploader from './input-components/uploader';\nimport SDFilter from './input-components/sdfilter';\nimport FilterCutoff from './input-components/filtercutoff';\nimport LookDistance from './input-components/lookdistance';\nimport TableHeaders from './input-components/tableheaders';\nimport AnalysisColumn from './input-components/analysiscolumn';\nimport NegativeOnly from './input-components/negativeonly';\nimport Results from './output-components/results';\nimport FileStats from './output-components/filestats';\nimport ZoomButtons from './output-components/zoombuttons';\nimport Processor from './processing/processor.js';\nimport ErrorMsg from './input-components/errormsg';\nimport About from './input-components/about';\nimport InterpolateMode from './input-components/interpolatemode';\nimport DropoutColumns from './input-components/dropoutcolumns';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      csvData: [],\n      cleanedCsvData: [],\n      SDmode: true,\n      InterpolateMode: true,\n      filterCutoff: 1.5,\n      filterLower: true,\n      filterHigher: false,\n      lookDistance: 5,\n      ignoredRows: 1,\n      analysisColumn: 0,\n      dropoutColumns: [0],\n      isProcessing: false,\n      dropoutRowNums: [],\n      graphWidth: 700,\n      errorMsg: '',\n    }\n\n    this.toggleProcessingData = this.toggleProcessingData.bind(this);\n    this.checkForErrors = this.checkForErrors.bind(this);\n    this.changeGraphSize = this.changeGraphSize.bind(this);\n    this.loadNegativeOnly = this.loadNegativeOnly.bind(this);\n    this.loadNewData = this.loadNewData.bind(this);\n    this.loadSDmode = this.loadSDmode.bind(this);\n    this.loadInterpolateMode = this.loadInterpolateMode.bind(this);\n    this.loadFilterCutoff = this.loadFilterCutoff.bind(this);\n    this.loadLookDistance = this.loadLookDistance.bind(this);\n    this.loadIgnoredRows = this.loadIgnoredRows.bind(this);\n    this.loadAnalysisColumn = this.loadAnalysisColumn.bind(this);\n    this.loadDropoutColumns = this.loadDropoutColumns.bind(this);\n  }\n\n  // Trigger data processing\n  toggleProcessingData() {\n    this.setState({ isProcessing: !this.state.isProcessing });\n  }\n\n  // Calls the analysis function if any of the filter settings have been changed,\n  // or, if processing is disabled, checks to make sure that valid #'s are supplied\n  // - without checking, the analysis function would in-turn update cleanedCsvData \n  //   and delRowNums, causing an infinite loop. \n  componentDidUpdate(prevProps, prevState, snapshot) {\n    const errCheck = this.checkForErrors();\n    if (errCheck === '' && this.state.errorMsg !== '') {\n      this.setState({ errorMsg: '' });\n    }\n    if (this.state.isProcessing) {\n      if (prevState.csvData !== this.state.csvData\n        || prevState.isProcessing !== this.state.isProcessing\n        || prevState.SDmode !== this.state.SDmode\n        || prevState.InterpolateMode !== this.state.InterpolateMode\n        || prevState.lookDistance !== this.state.lookDistance\n        || prevState.analysisColumn !== this.state.analysisColumn\n        || prevState.dropoutColumns !== this.state.dropoutColumns\n        || prevState.ignoredRows !== this.state.ignoredRows\n        || prevState.filterCutoff !== this.state.filterCutoff\n        || prevState.filterLower !== this.state.filterLower\n        || prevState.filterHigher !== this.state.filterHigher) {\n        if (errCheck === '') {\n          // console.log(\"graphing: ignoreRows: \" + this.state.ignoredRows);\n          let results = Processor.cleanData(this.state.csvData, this.state.SDmode, this.state.InterpolateMode,\n            this.state.filterCutoff, this.state.filterLower, this.state.filterHigher,\n            parseInt(this.state.lookDistance), this.state.ignoredRows, this.state.analysisColumn, this.state.dropoutColumns);\n          this.setState({ cleanedCsvData: results.cleanedCsvData, dropoutRowNums: results.dropoutRowNums });\n        } else {\n          this.setState({ errorMsg: errCheck, isProcessing: false });\n        }\n      }\n    }\n  }\n\n  // Returns any validation errors with the current settings, or empty string if valid\n  checkForErrors() {\n    let errors = [];\n    if (isNaN(this.state.filterCutoff)) { errors.push(\"the cutoff\"); }\n    if (isNaN(this.state.lookDistance)) { errors.push(\"the comparison distance\"); }\n    if (this.state.dropoutColumns.length === 0) { errors.push('valid modify columns (usually same as analysis column)'); }\n    if (this.state.csvData[0] === undefined) {\n      errors.push('a csv file to analyse');\n      errors = \"Please enter \" + errors.join(\", \") + \".\";\n      return errors;\n    }\n    if (this.state.analysisColumn < 0 || this.state.analysisColumn > this.state.csvData[0].length) {\n      errors.push(\"a valid column number to analyze\");\n    }\n    if (this.state.ignoredRows === \"\") { errors.push(\"header rows\"); }\n    if (errors.length !== 0) {\n      errors = [\"Please enter \" + errors.join(\", \") + \".\"];\n    }\n    if (this.state.csvData.length !== 0) {\n      try {\n        let colOfInterest = [];\n        for (let row = this.state.ignoredRows; row < this.state.csvData.length; row++) {\n          colOfInterest.push(this.state.csvData[row][this.state.analysisColumn]);\n        }\n        mean(colOfInterest);\n      } catch (e) {\n        errors.push('Non-number values detected (did you forget to set header rows).');\n      }\n    }\n    if (errors.length === 0) { return '' }\n    return errors.join(' ');\n  }\n\n  // Callback for resizing the visualizer chart (takes '+' or any other value will decrease width)\n  changeGraphSize(direction) {\n    let newWidth;\n    if (direction === '+') {\n      newWidth = this.state.graphWidth + 200;\n    } else {\n      newWidth = this.state.graphWidth - 200;\n    }\n    this.setState({ graphWidth: newWidth });\n  }\n\n  // Callback for filtering lower/higher values only\n  loadNegativeOnly(value, higherOrLower) {\n    if (higherOrLower === 'lower') {\n      this.setState({ filterLower: value });\n    } else {\n      this.setState({ filterHigher: value });\n    }\n  }\n\n  // Callback for updating analysis column\n  loadAnalysisColumn(event) {\n    const val = parseInt(event.target.value);\n    if (isNaN(val)) {\n      this.setState({ analysisColumn: 0 });\n    } else {\n      this.setState({ analysisColumn: val - 1 });\n    }\n    // const confirmValue = parseInt(event.target.value) - 1;\n    // this.setState({ analysisColumn: confirmValue });\n  }\n\n  // Callback for updating dropout columns, expects well-formed string\n  loadDropoutColumns(arrayOfDropouts) {\n    // @TODO: parse\n    this.setState({ dropoutColumns: arrayOfDropouts });\n  }\n\n\n  // Callback for updating the amount of row to ignore\n  loadIgnoredRows(event) {\n    this.setState({ ignoredRows: event.target.value });\n  }\n\n  // Callback for bringing up the selected file's csv data \n  loadNewData(newdata) {\n    this.setState({ csvData: newdata });\n  }\n\n  // Callback for enabling/disabling standard deviation mode.\n  loadSDmode(isEnabled) {\n    this.setState({ SDmode: isEnabled });\n  }\n\n  // Callback for enabling/disabling interpolation\n  loadInterpolateMode(isEnabled) {\n    this.setState({ InterpolateMode: isEnabled });\n  }\n\n  // Callback for updating the filter cutoff input\n  loadFilterCutoff(event) {\n    this.setState({ filterCutoff: parseFloat(event.target.value) });\n  }\n\n  // Callback for updating the look distance\n  loadLookDistance(event) {\n    this.setState({ lookDistance: parseInt(event.target.value) });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <div><About /></div>\n        </header>\n        <div className=\"app-body\" style={{ paddingLeft: '25px' }}>\n          {/* Left-hand Column - draw input/settings here! */}\n          <div className=\"columns\">\n            <div className=\"column is-two-fifths max-450-px\">\n              <div\n                className={this.state.isProcessing ? 'box dropout-controls isProcessing is-clearfix' : 'box dropout-controls is-clearfix'} >\n                <div className=\"columns\">\n                  <div className=\"column\">\n                    <h2 style={{ marginTop: '5px' }} className=\"title is-4\">Dropout remover</h2>\n                  </div>\n                  <div className=\"column is-two-fifths\" style={{ textAlign: 'right' }}>\n                    <InstructionsGuide />\n                  </div>\n                </div>\n                <p>Load .csv file:</p>\n                <Uploader callback={this.loadNewData} />\n                <div className=\"columns\">\n                  <div className=\"column\">\n                    <TableHeaders callback={this.loadIgnoredRows} default={this.state.ignoredRows} />\n                  </div>\n                  <div className=\"column\">\n                    <AnalysisColumn\n                      callback={this.loadAnalysisColumn}\n                      maxColumns={this.state.csvData.length === 0 ? '1' : this.state.csvData[0].length}\n                      default={this.state.analysisColumn}\n                    />\n                    <DropoutColumns\n                      default={this.state.dropoutColumns}\n                      callback={this.loadDropoutColumns}\n                      maxColumns={this.state.csvData.length === 0 ? '1' : this.state.csvData[0].length}\n                    />\n                  </div>\n                </div>\n                <label className=\"label\">Filter Settings</label>\n                <SDFilter callback={this.loadSDmode} />\n                <div className=\"columns\">\n                  <div className=\"column is-two-fifths\">\n                    <FilterCutoff\n                      callback={this.loadFilterCutoff}\n                      default={this.state.filterCutoff}\n                      mode={this.state.SDmode}\n                    />\n                  </div>\n                  <div className=\"column\">\n                    <LookDistance callback={this.loadLookDistance} default={this.state.lookDistance} />\n                  </div>\n                </div>\n                <div className=\"columns\">\n                  <div className=\"column\">\n                    <NegativeOnly\n                      callback={this.loadNegativeOnly}\n                      lowerDefault={this.state.filterLower}\n                      higherDefault={this.state.filterHigher}\n                    />\n                  </div>\n                </div>\n                <div className=\"columns\">\n                  <div className=\"column\">\n                    <InterpolateMode callback={this.loadInterpolateMode} />\n                  </div>\n                </div>\n                <ErrorMsg errorMsg={this.state.errorMsg} />\n                <button\n                  className=\"button is-link is-light is-pulled-right\"\n                  disabled={this.state.csvData.length === 0 || this.state.errorMsg !== ''}\n                  onClick={this.toggleProcessingData}\n                >\n                  {this.state.isProcessing ? 'Auto-processing' : 'Process'}\n                </button>\n                <ZoomButtons\n                  graphWidth={this.state.graphWidth}\n                  callback={this.changeGraphSize}\n                  isProcessing={this.state.isProcessing} />\n              </div>\n              <FileStats\n                {...this.state}\n              />\n            </div>\n\n            <div className=\"column max-without-450-px\">\n              {/* Right-hand Column - draw graphs here!*/}\n              <Results {...this.state} />\n            </div>\n          </div>\n        </div>\n      </div >\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  } \n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        console.log(\"No service worker found.\");\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}